package br.com.educacao.calculadora;

import java.util.Scanner;
import java.text.DecimalFormat;

/**
 * Classe respons√°vel por calcular a m√©dia de um estudante
 * com base em tr√™s notas (N1, N2, N3).
 * 
 * @author Mauro de Lima
 * @version 1.0
 * @since 2025-07-07
 */
public class CalculadoraMediaEstudante {
    
    // === CONSTANTES ===
    
    /** Nota m√≠nima permitida */
    private static final double NOTA_MINIMA = 0.0;
    
    /** Nota m√°xima permitida */
    private static final double NOTA_MAXIMA = 10.0;
    
    /** M√©dia m√≠nima para aprova√ß√£o */
    private static final double MEDIA_APROVACAO = 7.0;
    
    /** N√∫mero de notas para calcular a m√©dia */
    private static final int QUANTIDADE_NOTAS = 3;
    
    // === ATRIBUTOS DA CLASSE ===
    
    /** Scanner para leitura de dados do usu√°rio */
    private static Scanner scanner = new Scanner(System.in);
    
    /** Formatador para exibir n√∫meros com 2 casas decimais */
    private static DecimalFormat formatadorDecimal = new DecimalFormat("#0.00");
    
    // === M√âTODO PRINCIPAL ===
    
    /**
     * M√©todo principal que executa o programa de c√°lculo de m√©dia
     * 
     * @param args argumentos da linha de comando (n√£o utilizados)
     */
    public static void main(String[] args) {
        try {
            // Exibe cabe√ßalho do programa
            exibirCabecalho();
            
            // Coleta dados do estudante
            String nomeEstudante = obterNomeEstudante();
            
            // Coleta as tr√™s notas
            double primeiraNota = obterNota("primeira nota (N1)");
            double segundaNota = obterNota("segunda nota (N2)");
            double terceiraNota = obterNota("terceira nota (N3)");
            
            // Calcula a m√©dia
            double mediaFinal = calcularMedia(primeiraNota, segundaNota, terceiraNota);
            
            // Determina a situa√ß√£o do estudante
            String situacaoEstudante = determinarSituacao(mediaFinal);
            
            // Exibe o resultado
            exibirResultado(nomeEstudante, primeiraNota, segundaNota, 
                           terceiraNota, mediaFinal, situacaoEstudante);
            
        } catch (Exception excecao) {
            System.err.println(" Erro inesperado: " + excecao.getMessage());
        } finally {
            // Fecha o scanner para liberar recursos
            fecharRecursos();
        }
    }
    
    // === M√âTODOS DE ENTRADA DE DADOS ===
    
    /**
     * Obt√©m o nome do estudante
     * 
     * @return nome do estudante v√°lido (n√£o vazio)
     */
    private static String obterNomeEstudante() {
        String nomeEstudante;
        
        do {
            System.out.print("üë§ Digite o nome do estudante: ");
            nomeEstudante = scanner.nextLine().trim();
            
            if (nomeEstudante.isEmpty()) {
                System.out.println("‚ö†Ô∏è  Nome n√£o pode estar vazio. Tente novamente.");
            }
            
        } while (nomeEstudante.isEmpty());
        
        return nomeEstudante;
    }
    
    /**
     * Obt√©m uma nota v√°lida do usu√°rio
     * 
     * @param descricaoNota descri√ß√£o da nota sendo solicitada
     * @return nota v√°lida entre 0.0 e 10.0
     */
    private static double obterNota(String descricaoNota) {
        double nota;
        boolean notaValida;
        
        do {
            System.out.printf("Digite a %s (0.0 a 10.0): ", descricaoNota);
            
            // Verifica se a entrada √© um n√∫mero v√°lido
            if (scanner.hasNextDouble()) {
                nota = scanner.nextDouble();
                notaValida = validarNota(nota);
                
                if (!notaValida) {
                    System.out.printf(" Nota inv√°lida! Digite um valor entre %.1f e %.1f%n", 
                                    NOTA_MINIMA, NOTA_MAXIMA);
                }
            } else {
                System.out.println("  Por favor, digite um n√∫mero v√°lido!");
                scanner.next(); // Limpa entrada inv√°lida
                nota = -1; // Valor inv√°lido para continuar o loop
                notaValida = false;
            }
            
        } while (!notaValida);
        
        // Limpa o buffer do scanner
        scanner.nextLine();
        
        return nota;
    }
    
    // === M√âTODOS DE VALIDA√á√ÉO ===
    
    /**
     * Valida se uma nota est√° dentro dos limites permitidos
     * 
     * @param nota nota a ser validada
     * @return true se a nota √© v√°lida, false caso contr√°rio
     */
    private static boolean validarNota(double nota) {
        return nota >= NOTA_MINIMA && nota <= NOTA_MAXIMA;
    }
    
    // === M√âTODOS DE C√ÅLCULO ===
    
    /**
     * Calcula a m√©dia aritm√©tica de tr√™s notas
     * 
     * @param primeiraNota primeira nota (N1)
     * @param segundaNota segunda nota (N2)
     * @param terceiraNota terceira nota (N3)
     * @return m√©dia aritm√©tica das tr√™s notas
     */
    private static double calcularMedia(double primeiraNota, double segundaNota, double terceiraNota) {
        // Valida√ß√£o das notas antes do c√°lculo
        if (!validarNota(primeiraNota) || !validarNota(segundaNota) || !validarNota(terceiraNota)) {
            throw new IllegalArgumentException("Uma ou mais notas s√£o inv√°lidas para o c√°lculo da m√©dia");
        }
        
        // C√°lculo da m√©dia aritm√©tica
        double somaTotal = primeiraNota + segundaNota + terceiraNota;
        double mediaCalculada = somaTotal / QUANTIDADE_NOTAS;
        
        return mediaCalculada;
    }
    
    /**
     * Determina a situa√ß√£o do estudante com base na m√©dia
     * 
     * @param mediaFinal m√©dia final calculada
     * @return situa√ß√£o do estudante (Aprovado/Reprovado)
     */
    private static String determinarSituacao(double mediaFinal) {
        if (mediaFinal >= MEDIA_APROVACAO) {
            return "APROVADO";
        } else {
            return "REPROVADO";
        }
    }
    
    // === M√âTODOS DE EXIBI√á√ÉO ===
    
    /**
     * Exibe o cabe√ßalho do programa
     */
    private static void exibirCabecalho() {
        System.out.println("=" .repeat(60));
        System.out.println("          CALCULADORA DE M√âDIA ESTUDANTIL ");
        System.out.println("=" .repeat(60));
        System.out.println("Este programa calcula a m√©dia de um estudante com 3 notas.");
        System.out.println("M√©dia para aprova√ß√£o: " + formatadorDecimal.format(MEDIA_APROVACAO));
        System.out.println("-" .repeat(60));
    }
    
    /**
     * Exibe o resultado completo do c√°lculo
     * 
     * @param nomeEstudante nome do estudante
     * @param primeiraNota primeira nota
     * @param segundaNota segunda nota
     * @param terceiraNota terceira nota
     * @param mediaFinal m√©dia calculada
     * @param situacaoEstudante situa√ß√£o final
     */
    private static void exibirResultado(String nomeEstudante, double primeiraNota, 
                                      double segundaNota, double terceiraNota, 
                                      double mediaFinal, String situacaoEstudante) {
        
        System.out.println("\n" + "=" .repeat(60));
        System.out.println("                    RELAT√ìRIO FINAL");
        System.out.println("=" .repeat(60));
        
        System.out.printf(" Estudante: %s%n", nomeEstudante);
        System.out.println("-" .repeat(60));
        
        System.out.printf(" Primeira Nota (N1): %s%n", formatadorDecimal.format(primeiraNota));
        System.out.printf(" Segunda Nota (N2):  %s%n", formatadorDecimal.format(segundaNota));
        System.out.printf(" Terceira Nota (N3): %s%n", formatadorDecimal.format(terceiraNota));
        
        System.out.println("-" .repeat(60));
        System.out.printf(" M√âDIA FINAL: %s%n", formatadorDecimal.format(mediaFinal));
        System.out.printf(" SITUA√á√ÉO: %s%n", situacaoEstudante);
        System.out.println("=" .repeat(60));
        
        // Exibe informa√ß√µes adicionais baseadas na situa√ß√£o
        exibirInformacoesAdicionais(mediaFinal);
    }
    
    /**
     * Exibe informa√ß√µes adicionais baseadas na m√©dia do estudante
     * 
     * @param mediaFinal m√©dia final calculada
     */
    private static void exibirInformacoesAdicionais(double mediaFinal) {
        System.out.println("\n INFORMA√á√ïES ADICIONAIS:");
        
        if (mediaFinal >= 9.0) {
            System.out.println(" Excelente desempenho! Parab√©ns!");
        } else if (mediaFinal >= MEDIA_APROVACAO) {
            System.out.println(" Bom desempenho! Continue assim!");
        } else if (mediaFinal >= 5.0) {
            System.out.println("  Desempenho regular. Considere estudar mais.");
        } else {
            System.out.println("√â necess√°rio melhorar os estudos.");
        }
        
        // Calcula quantos pontos faltam para aprova√ß√£o (se reprovado)
        if (mediaFinal < MEDIA_APROVACAO) {
            double pontosFaltantes = MEDIA_APROVACAO - mediaFinal;
            System.out.printf(" Faltaram %.2f pontos para aprova√ß√£o.%n", pontosFaltantes);
        }
        
        System.out.println("\nüéì Obrigado por usar a Calculadora de M√©dia Estudantil!");
    }
    
    // === M√âTODOS DE LIMPEZA ===
    
    /**
     * Fecha recursos utilizados pelo programa
     */
    private static void fecharRecursos() {
        if (scanner != null) {
            scanner.close();
        }
    }
}